# Generated by Django 5.2 on 2025-04-17 10:47

import django.core.validators
import django.db.models.deletion
import tinymce.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_type', models.CharField(choices=[('research', 'Research Article'), ('review', 'Review Article'), ('analytical', 'Analytical Article'), ('descriptive', 'Descriptive Article'), ('theoretical', 'Theoretical Article'), ('short', 'Short Communication'), ('survey', 'Survey Article'), ('narrative', 'Narrative Article'), ('editorial', 'Editorial'), ('practical', 'Practical Article')], max_length=100, verbose_name='Article Type')),
                ('title', models.CharField(max_length=300, verbose_name='Article Title')),
                ('subtitle', models.CharField(blank=True, max_length=300, verbose_name='Subtitle')),
                ('abstract', models.TextField(blank=True, verbose_name='Abstract')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('accepted', 'Accepted'), ('published', 'Published'), ('rejected', 'Rejected')], default='draft', max_length=50, verbose_name='Status')),
                ('journal', models.CharField(blank=True, max_length=200, verbose_name='Journal/Conference')),
                ('volume', models.CharField(blank=True, max_length=50, verbose_name='Volume')),
                ('issue', models.CharField(blank=True, max_length=50, verbose_name='Issue')),
                ('pages', models.CharField(blank=True, max_length=50, verbose_name='Pages')),
                ('doi', models.CharField(blank=True, max_length=100, unique=True, verbose_name='DOI')),
                ('is_published', models.BooleanField(default=False, verbose_name='Published')),
                ('publish_date', models.DateField(blank=True, null=True, verbose_name='Publish Date')),
                ('manuscript', models.FileField(blank=True, null=True, upload_to='articles/manuscripts/', verbose_name='Manuscript File')),
                ('supplementary_materials', models.FileField(blank=True, null=True, upload_to='articles/supplementary/', verbose_name='Supplementary Materials')),
                ('submitted_date', models.DateField(blank=True, null=True, verbose_name='Submitted Date')),
                ('accepted_date', models.DateField(blank=True, null=True, verbose_name='Accepted Date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Article',
                'verbose_name_plural': 'Articles',
                'ordering': ['-publish_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='ArticleTemplateSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('title', 'Title'), ('abstract', 'Abstract'), ('keywords', 'Keywords'), ('introduction', 'Introduction'), ('references', 'References'), ('stimuli', 'Stimuli'), ('subject', 'Subject'), ('procedure', 'Procedure'), ('data acquisition and analysis', 'Data acquisition and analysis'), ('results', 'Results'), ('discussion', 'Discussion'), ('conclusion', 'Conclusion'), ('analysis', 'In-depth Analysis'), ('arguments', 'Logical Arguments'), ('literature_review', 'Literature Review'), ('synthesis', 'Synthesis'), ('case_study', 'Case Study'), ('implications', 'Practical Implications'), ('limitations', 'Limitations'), ('acknowledgments', 'Acknowledgments')], max_length=100, verbose_name='Section Type')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Default Title')),
                ('description', models.TextField(blank=True, verbose_name='Description/Guidance')),
                ('required', models.BooleanField(default=True, verbose_name='Required Section')),
                ('default_position', models.PositiveIntegerField(default=0, verbose_name='Default Position')),
            ],
            options={
                'verbose_name': 'Template Section',
                'verbose_name_plural': 'Template Sections',
                'ordering': ['default_position'],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publisher', models.CharField(max_length=200, verbose_name='Publisher')),
                ('publish_date', models.DateField(blank=True, null=True, verbose_name='Publish Date')),
                ('isbn', models.CharField(blank=True, max_length=100, verbose_name='ISBN')),
                ('page_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Page Count')),
                ('authors', models.TextField(verbose_name='Authors')),
                ('edition', models.PositiveIntegerField(default=1, verbose_name='Edition')),
                ('is_published', models.BooleanField(default=False, verbose_name='Published')),
                ('preface', tinymce.models.HTMLField(blank=True, verbose_name='Preface')),
                ('introduction', tinymce.models.HTMLField(blank=True, verbose_name='Introduction')),
                ('conclusion', tinymce.models.HTMLField(blank=True, verbose_name='Conclusion')),
                ('bibliography', tinymce.models.HTMLField(blank=True, verbose_name='Bibliography')),
                ('index', tinymce.models.HTMLField(blank=True, verbose_name='Index')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(max_length=100, unique=True, verbose_name='Keyword')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Keyword',
                'verbose_name_plural': 'Keywords',
                'ordering': ['term'],
            },
        ),
        migrations.CreateModel(
            name='ProjectTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Tag Name')),
                ('color', models.CharField(default='#007bff', max_length=7, verbose_name='Color Code (HEX)')),
            ],
            options={
                'verbose_name': 'Project Tag',
                'verbose_name_plural': 'Project Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ResearchProposalTemplateSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('title', 'Title Page'), ('abstract', 'Abstract'), ('introduction', 'Introduction'), ('problem_statement', 'Problem Statement'), ('research_questions', 'Research Questions'), ('objectives', 'Objectives'), ('significance', 'Significance of Research'), ('literature_review', 'Literature Review'), ('methodology', 'Methodology'), ('research_design', 'Research Design'), ('data_collection', 'Data Collection Methods'), ('data_analysis', 'Data Analysis Methods'), ('timeline', 'Timeline/Schedule'), ('budget', 'Budget'), ('expected_outcomes', 'Expected Outcomes'), ('references', 'References'), ('appendices', 'Appendices')], max_length=100, verbose_name='Section Type')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Default Title')),
                ('description', models.TextField(blank=True, verbose_name='Description/Guidance')),
                ('required', models.BooleanField(default=True, verbose_name='Required Section')),
                ('default_position', models.PositiveIntegerField(default=0, verbose_name='Default Position')),
            ],
            options={
                'verbose_name': 'Proposal Template Section',
                'verbose_name_plural': 'Proposal Template Sections',
                'ordering': ['default_position'],
            },
        ),
        migrations.CreateModel(
            name='ThesisTemplateSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('title', 'Title Page'), ('approval', 'Approval Page'), ('dedication', 'Dedication'), ('acknowledgments', 'Acknowledgments'), ('abstract', 'Abstract'), ('table_of_contents', 'Table of Contents'), ('list_of_tables', 'List of Tables'), ('list_of_figures', 'List of Figures'), ('list_of_abbreviations', 'List of Abbreviations'), ('introduction', 'Introduction'), ('literature_review', 'Literature Review'), ('methodology', 'Methodology'), ('results', 'Results'), ('discussion', 'Discussion'), ('conclusion', 'Conclusion'), ('recommendations', 'Recommendations'), ('references', 'References'), ('appendices', 'Appendices')], max_length=100, verbose_name='Section Type')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Default Title')),
                ('description', models.TextField(blank=True, verbose_name='Description/Guidance')),
                ('required', models.BooleanField(default=True, verbose_name='Required Section')),
                ('default_position', models.PositiveIntegerField(default=0, verbose_name='Default Position')),
            ],
            options={
                'verbose_name': 'Thesis Template Section',
                'verbose_name_plural': 'Thesis Template Sections',
                'ordering': ['default_position'],
            },
        ),
        migrations.CreateModel(
            name='ArticleTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Template Name')),
                ('article_type', models.CharField(choices=[('research', 'Research Article'), ('review', 'Review Article'), ('analytical', 'Analytical Article'), ('descriptive', 'Descriptive Article'), ('theoretical', 'Theoretical Article'), ('short', 'Short Communication'), ('survey', 'Survey Article'), ('narrative', 'Narrative Article'), ('editorial', 'Editorial'), ('practical', 'Practical Article')], max_length=100, verbose_name='Article Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('sections', models.ManyToManyField(related_name='templates', to='Main.articletemplatesection', verbose_name='Sections')),
            ],
            options={
                'verbose_name': 'Article Template',
                'verbose_name_plural': 'Article Templates',
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('orcid_id', models.CharField(blank=True, help_text='Format: XXXX-XXXX-XXXX-XXXX', max_length=19, verbose_name='ORCID ID')),
                ('affiliation', models.CharField(blank=True, max_length=200, verbose_name='Affiliation')),
                ('researcher_id', models.CharField(blank=True, max_length=50, verbose_name='Researcher ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
                'ordering': ['last_name', 'first_name'],
                'unique_together': {('first_name', 'last_name', 'email')},
            },
        ),
        migrations.CreateModel(
            name='ArticleAuthorship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_corresponding', models.BooleanField(default=False, verbose_name='Corresponding Author')),
                ('authorship_order', models.PositiveIntegerField(default=0, verbose_name='Authorship Order')),
                ('affiliation', models.CharField(blank=True, max_length=200, verbose_name='Affiliation for this work')),
                ('contributions', models.TextField(blank=True, verbose_name='Author Contributions')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.article', verbose_name='Article')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.author', verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Article Authorship',
                'verbose_name_plural': 'Article Authorships',
                'ordering': ['authorship_order'],
                'unique_together': {('article', 'author')},
            },
        ),
        migrations.AddField(
            model_name='article',
            name='authors',
            field=models.ManyToManyField(related_name='authored_articles', through='Main.ArticleAuthorship', to='Main.author', verbose_name='Authors'),
        ),
        migrations.CreateModel(
            name='BookChapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_number', models.PositiveIntegerField(verbose_name='Chapter Number')),
                ('title', models.CharField(max_length=200, verbose_name='Chapter Title')),
                ('summary', models.TextField(blank=True, verbose_name='Chapter Summary')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='Main.book', verbose_name='Book')),
            ],
            options={
                'verbose_name': 'Book Chapter',
                'verbose_name_plural': 'Book Chapters',
                'ordering': ['chapter_number'],
            },
        ),
        migrations.CreateModel(
            name='BookFigure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Figure Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('image', models.ImageField(upload_to='book_figures/', verbose_name='Image File')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position in Chapter')),
                ('source', models.CharField(blank=True, max_length=200, verbose_name='Source/Credit')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='figures', to='Main.bookchapter', verbose_name='Chapter')),
            ],
            options={
                'verbose_name': 'Book Figure',
                'verbose_name_plural': 'Book Figures',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='BookSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('text', 'Text'), ('figure', 'Figure'), ('table', 'Table'), ('quote', 'Quote'), ('list', 'List'), ('code', 'Code'), ('equation', 'Equation'), ('footnote', 'Footnote')], max_length=100, verbose_name='Section Type')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Section Title')),
                ('content', tinymce.models.HTMLField(verbose_name='Content')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position in Chapter')),
                ('notes', models.TextField(blank=True, verbose_name='Translator/Author Notes')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='Main.bookchapter', verbose_name='Chapter')),
            ],
            options={
                'verbose_name': 'Book Section',
                'verbose_name_plural': 'Book Sections',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='BookTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Table Title')),
                ('content', tinymce.models.HTMLField(verbose_name='Table Content')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position in Chapter')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tables', to='Main.bookchapter', verbose_name='Chapter')),
            ],
            options={
                'verbose_name': 'Book Table',
                'verbose_name_plural': 'Book Tables',
                'ordering': ['position'],
            },
        ),
        migrations.AddField(
            model_name='article',
            name='keywords',
            field=models.ManyToManyField(blank=True, related_name='articles', to='Main.keyword', verbose_name='Keywords'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, verbose_name='Biography')),
                ('phone_number', models.CharField(blank=True, max_length=15, verbose_name='Phone Number')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth Date')),
                ('academic_degree', models.CharField(blank=True, max_length=100, verbose_name='Academic Degree')),
                ('field_of_study', models.CharField(blank=True, max_length=100, verbose_name='Field of Study')),
                ('university', models.CharField(blank=True, max_length=100, verbose_name='University')),
                ('email_confirmed', models.BooleanField(default=False, verbose_name='Email Confirmed')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Project Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('type', models.CharField(choices=[('article_writing', 'Article Writing'), ('book_writing', 'Book Writing'), ('book_translation', 'Book Translation'), ('research_proposal', 'Research Proposal'), ('research_project', 'Research Project'), ('thesis', 'Thesis/Dissertation')], max_length=100, verbose_name='Project Type')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('published', 'Published'), ('canceled', 'Canceled')], default='not_started', max_length=100, verbose_name='Project Status')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('keywords', models.ManyToManyField(blank=True, related_name='projects', to='Main.keyword', verbose_name='Keywords')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL, verbose_name='Project Owner')),
                ('related_projects', models.ManyToManyField(blank=True, help_text='Projects related to this one', to='Main.project', verbose_name='Related Projects')),
                ('tags', models.ManyToManyField(blank=True, to='Main.projecttag', verbose_name='Project Tags')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='project',
            field=models.OneToOneField(limit_choices_to={'type': 'book_writing'}, on_delete=django.db.models.deletion.CASCADE, related_name='_book', to='Main.project'),
        ),
        migrations.AddField(
            model_name='article',
            name='project',
            field=models.OneToOneField(blank=True, limit_choices_to={'type': 'article_writing'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='article', to='Main.project', verbose_name='Related Project'),
        ),
        migrations.CreateModel(
            name='ProjectComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Content')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='Main.project', verbose_name='Project')),
            ],
            options={
                'verbose_name': 'Project Comment',
                'verbose_name_plural': 'Project Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_type', models.CharField(choices=[('article', 'Article'), ('book', 'Book'), ('thesis', 'Thesis')], max_length=20, verbose_name='Reference Type')),
                ('citation_key', models.CharField(max_length=100, unique=True, verbose_name='Citation Key')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.article', verbose_name='Article Reference')),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.book', verbose_name='Book Reference')),
            ],
            options={
                'verbose_name': 'Reference',
                'verbose_name_plural': 'References',
                'ordering': ['citation_key'],
            },
        ),
        migrations.CreateModel(
            name='ArticleSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('title', 'Title'), ('abstract', 'Abstract'), ('keywords', 'Keywords'), ('introduction', 'Introduction'), ('references', 'References'), ('stimuli', 'Stimuli'), ('subject', 'Subject'), ('procedure', 'Procedure'), ('data acquisition and analysis', 'Data acquisition and analysis'), ('results', 'Results'), ('discussion', 'Discussion'), ('conclusion', 'Conclusion'), ('analysis', 'In-depth Analysis'), ('arguments', 'Logical Arguments'), ('literature_review', 'Literature Review'), ('synthesis', 'Synthesis'), ('case_study', 'Case Study'), ('implications', 'Practical Implications'), ('limitations', 'Limitations'), ('acknowledgments', 'Acknowledgments')], max_length=100, verbose_name='Section Type')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Section Title')),
                ('content', tinymce.models.HTMLField(verbose_name='Content')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position in Article')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='Main.article', verbose_name='Article')),
                ('references', models.ManyToManyField(blank=True, to='Main.reference', verbose_name='Cited References')),
            ],
            options={
                'verbose_name': 'Article Section',
                'verbose_name_plural': 'Article Sections',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='ResearchProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=200, verbose_name='Organization')),
                ('research_code', models.CharField(blank=True, max_length=50, verbose_name='Research Code')),
                ('supervisor', models.CharField(blank=True, max_length=100, verbose_name='Supervisor')),
                ('research_team', models.TextField(blank=True, verbose_name='Research Team')),
                ('project', models.OneToOneField(limit_choices_to={'type': 'research_project'}, on_delete=django.db.models.deletion.CASCADE, related_name='research_project', to='Main.project')),
                ('references', models.ManyToManyField(blank=True, to='Main.reference', verbose_name='Cited References')),
            ],
            options={
                'verbose_name': 'Research Project',
                'verbose_name_plural': 'Research Projects',
            },
        ),
        migrations.CreateModel(
            name='ResearchProjectSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('title', 'title'), ('research_design', 'Research Design'), ('participants', 'Participants'), ('materials', 'Materials/Instruments'), ('procedure', 'Procedure'), ('data_collection', 'Data Collection'), ('data_analysis', 'Data Analysis'), ('ethical_considerations', 'Ethical Considerations')], max_length=100, verbose_name='Section Type')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Section Title')),
                ('content', tinymce.models.HTMLField(verbose_name='Content')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position in Project')),
                ('research_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='Main.researchproject', verbose_name='Research Project')),
            ],
            options={
                'verbose_name': 'Research Project Section',
                'verbose_name_plural': 'Research Project Sections',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='ResearchProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_fa', models.CharField(max_length=200, verbose_name='Persian Name')),
                ('name_en', models.CharField(max_length=200, verbose_name='English Name')),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Budget')),
                ('duration_months', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration (months)')),
                ('sponsor', models.CharField(blank=True, max_length=200, verbose_name='Sponsor')),
                ('problem_statement', tinymce.models.HTMLField(verbose_name='Problem Statement')),
                ('research_importance', tinymce.models.HTMLField(verbose_name='Research Importance')),
                ('literature_review', tinymce.models.HTMLField(verbose_name='Literature Review')),
                ('research_objectives', tinymce.models.HTMLField(verbose_name='Research Objectives')),
                ('research_methodology', tinymce.models.HTMLField(verbose_name='Research Methodology')),
                ('expected_results', tinymce.models.HTMLField(verbose_name='Expected Results')),
                ('references_section', tinymce.models.HTMLField(blank=True, verbose_name='References')),
                ('project', models.OneToOneField(limit_choices_to={'type': 'research_proposal'}, on_delete=django.db.models.deletion.CASCADE, related_name='research_proposal', to='Main.project')),
            ],
            options={
                'verbose_name': 'Research Proposal',
                'verbose_name_plural': 'Research Proposals',
            },
        ),
        migrations.CreateModel(
            name='ResearchProposalSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('title', 'Title Page'), ('abstract', 'Abstract'), ('introduction', 'Introduction'), ('problem_statement', 'Problem Statement'), ('research_questions', 'Research Questions'), ('objectives', 'Objectives'), ('significance', 'Significance of Research'), ('literature_review', 'Literature Review'), ('methodology', 'Methodology'), ('research_design', 'Research Design'), ('data_collection', 'Data Collection Methods'), ('data_analysis', 'Data Analysis Methods'), ('timeline', 'Timeline/Schedule'), ('budget', 'Budget'), ('expected_outcomes', 'Expected Outcomes'), ('references', 'References'), ('appendices', 'Appendices')], max_length=100, verbose_name='Section Type')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Section Title')),
                ('content', tinymce.models.HTMLField(verbose_name='Content')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position in Proposal')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='Main.researchproposal', verbose_name='Research Proposal')),
            ],
            options={
                'verbose_name': 'Research Proposal Section',
                'verbose_name_plural': 'Research Proposal Sections',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='ResearchProposalTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Template Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('disciplines', models.CharField(blank=True, max_length=200, verbose_name='Applicable Disciplines')),
                ('sections', models.ManyToManyField(related_name='templates', to='Main.researchproposaltemplatesection', verbose_name='Sections')),
            ],
            options={
                'verbose_name': 'Research Proposal Template',
                'verbose_name_plural': 'Research Proposal Templates',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('due_date', models.DateField(blank=True, null=True, verbose_name='Due Date')),
                ('completed', models.BooleanField(default=False, verbose_name='Completed')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='Main.project', verbose_name='Project')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['due_date'],
            },
        ),
        migrations.CreateModel(
            name='Thesis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_name', models.CharField(max_length=100, verbose_name='Student Name')),
                ('university', models.CharField(max_length=200, verbose_name='University')),
                ('department', models.CharField(blank=True, max_length=200, verbose_name='Department')),
                ('defense_date', models.DateField(blank=True, null=True, verbose_name='Defense Date')),
                ('supervisor', models.CharField(max_length=100, verbose_name='Supervisor')),
                ('advisor', models.CharField(blank=True, max_length=100, verbose_name='Advisor')),
                ('grade', models.CharField(blank=True, max_length=50, verbose_name='Grade')),
                ('thesis_file', models.FileField(blank=True, null=True, upload_to='theses/', verbose_name='Thesis File')),
                ('abstract', models.TextField(blank=True, verbose_name='Abstract')),
                ('project', models.OneToOneField(limit_choices_to={'type': 'thesis'}, on_delete=django.db.models.deletion.CASCADE, related_name='thesis', to='Main.project')),
            ],
            options={
                'verbose_name': 'Thesis',
                'verbose_name_plural': 'Theses',
            },
        ),
        migrations.AddField(
            model_name='reference',
            name='thesis',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.thesis', verbose_name='Thesis Reference'),
        ),
        migrations.CreateModel(
            name='ThesisChapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_number', models.PositiveIntegerField(verbose_name='Chapter Number')),
                ('title', models.CharField(max_length=200, verbose_name='Chapter Title')),
                ('summary', models.TextField(blank=True, verbose_name='Chapter Summary')),
                ('thesis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='Main.thesis', verbose_name='Thesis')),
            ],
            options={
                'verbose_name': 'Thesis Chapter',
                'verbose_name_plural': 'Thesis Chapters',
                'ordering': ['chapter_number'],
            },
        ),
        migrations.CreateModel(
            name='ThesisReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.TextField(blank=True, verbose_name='Citation Context')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cited_in_theses', to='Main.reference', verbose_name='Reference')),
                ('thesis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='internal_references', to='Main.thesis', verbose_name='Thesis')),
            ],
            options={
                'verbose_name': 'Thesis Reference',
                'verbose_name_plural': 'Thesis References',
            },
        ),
        migrations.CreateModel(
            name='ThesisSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('title', 'Title Page'), ('approval', 'Approval Page'), ('dedication', 'Dedication'), ('acknowledgments', 'Acknowledgments'), ('abstract', 'Abstract'), ('table_of_contents', 'Table of Contents'), ('list_of_tables', 'List of Tables'), ('list_of_figures', 'List of Figures'), ('list_of_abbreviations', 'List of Abbreviations'), ('introduction', 'Introduction'), ('literature_review', 'Literature Review'), ('methodology', 'Methodology'), ('results', 'Results'), ('discussion', 'Discussion'), ('conclusion', 'Conclusion'), ('recommendations', 'Recommendations'), ('references', 'References'), ('appendices', 'Appendices')], max_length=100, verbose_name='Section Type')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Section Title')),
                ('content', tinymce.models.HTMLField(verbose_name='Content')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position in Thesis')),
                ('thesis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='Main.thesis', verbose_name='Thesis')),
            ],
            options={
                'verbose_name': 'Thesis Section',
                'verbose_name_plural': 'Thesis Sections',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='ThesisTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Template Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('university', models.CharField(blank=True, max_length=200, verbose_name='University')),
                ('department', models.CharField(blank=True, max_length=200, verbose_name='Department')),
                ('sections', models.ManyToManyField(related_name='templates', to='Main.thesistemplatesection', verbose_name='Sections')),
            ],
            options={
                'verbose_name': 'Thesis Template',
                'verbose_name_plural': 'Thesis Templates',
            },
        ),
        migrations.CreateModel(
            name='TranslatedBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_title', models.CharField(max_length=200, verbose_name='Original Title')),
                ('original_language', models.CharField(max_length=100, verbose_name='Original Language')),
                ('publisher', models.CharField(max_length=200, verbose_name='Publisher')),
                ('publish_date', models.DateField(blank=True, null=True, verbose_name='Publish Date')),
                ('isbn', models.CharField(blank=True, max_length=100, verbose_name='ISBN')),
                ('page_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Page Count')),
                ('translator', models.CharField(max_length=200, verbose_name='Translator')),
                ('original_author', models.CharField(max_length=200, verbose_name='Original Author')),
                ('is_published', models.BooleanField(default=False, verbose_name='Published')),
                ('translator_preface', tinymce.models.HTMLField(blank=True, verbose_name='Translator Preface')),
                ('original_preface', tinymce.models.HTMLField(blank=True, verbose_name='Original Preface')),
                ('introduction', tinymce.models.HTMLField(blank=True, verbose_name='Introduction')),
                ('conclusion', tinymce.models.HTMLField(blank=True, verbose_name='Conclusion')),
                ('bibliography', tinymce.models.HTMLField(blank=True, verbose_name='Bibliography')),
                ('index', tinymce.models.HTMLField(blank=True, verbose_name='Index')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(limit_choices_to={'type': 'book_translation'}, on_delete=django.db.models.deletion.CASCADE, related_name='translated_book', to='Main.project')),
            ],
            options={
                'verbose_name': 'Translated Book',
                'verbose_name_plural': 'Translated Books',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='bookchapter',
            name='translated_book',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='Main.translatedbook', verbose_name='Translated Book'),
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citation_text', models.TextField(blank=True, verbose_name='Citation Text')),
                ('page_number', models.CharField(blank=True, max_length=50, verbose_name='Page Number')),
                ('location', models.CharField(blank=True, max_length=200, verbose_name='Location in Document')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='citations', to='Main.project', verbose_name='Project')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='citations', to='Main.reference', verbose_name='Reference')),
            ],
            options={
                'verbose_name': 'Citation',
                'verbose_name_plural': 'Citations',
                'unique_together': {('project', 'reference')},
            },
        ),
        migrations.CreateModel(
            name='BookReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.TextField(blank=True, verbose_name='Citation Context')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='internal_references', to='Main.book', verbose_name='Book')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cited_in_books', to='Main.reference', verbose_name='Reference')),
            ],
            options={
                'verbose_name': 'Book Reference',
                'verbose_name_plural': 'Book References',
                'unique_together': {('book', 'reference')},
            },
        ),
        migrations.CreateModel(
            name='ArticleReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.TextField(blank=True, verbose_name='Citation Context')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='internal_references', to='Main.article', verbose_name='Article')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cited_in_articles', to='Main.reference', verbose_name='Reference')),
            ],
            options={
                'verbose_name': 'Article Reference',
                'verbose_name_plural': 'Article References',
                'unique_together': {('article', 'reference')},
            },
        ),
        migrations.AddConstraint(
            model_name='reference',
            constraint=models.CheckConstraint(condition=models.Q(('article__isnull', False), ('book__isnull', False), ('thesis__isnull', False), _connector='OR'), name='reference_must_have_one_source'),
        ),
        migrations.AlterUniqueTogether(
            name='thesisreference',
            unique_together={('thesis', 'reference')},
        ),
        migrations.AddConstraint(
            model_name='bookchapter',
            constraint=models.CheckConstraint(condition=models.Q(('book__isnull', False), ('translated_book__isnull', False), _connector='OR'), name='chapter_must_belong_to_book_or_translated_book'),
        ),
    ]
